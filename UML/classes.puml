@startuml dillinger_classes

skinparam shadowing false
'skinparam linetype polyline
'skinparam linetype ortho

skinparam class {
    ArrowColor black
    BorderColor black
    BackGroundColor lightgrey
}

skinparam package {
    ArrowColor black
    BorderColor black
    BackGroundColor white
}

package gameObjects {

    abstract "Entity" as entity {
        -boundingBox : QRectF
        --
        +Entity(width : qreal, height : qreal)
        +draw(p : QPainter) : void
		..Setters..
        +setPosition(pos : QPointF) : void
        +setPosition(x : qreal, y : qreal) : void
		..Getters..
        +pos() : QPointF
        +boundingBox() : QRectF
        +getType() : QString
    }

    together {
        abstract "StaticEntity" as statE {
            #isTransparent : boolean
            #isNoiseMuffler : boolean
            #isTangible : boolean
            --
            +StaticEntity(width : qreal, height : qreal)
			..Implementations..
			+getType() : QString
			..Getters..
            +isTransparent() : boolean
            +isNoiseMuffler() : boolean
            +isTangible() : boolean
        }

        abstract "DynamicEntity" as dynE {
            -speed : QPointF
			-sprites : QPixmap
            --
            +DynamicEntity(width : qreal, height : qreal)
			..Implementations..
            +getType() : QString
			..Setters..
            +setSpeed(speed : QPointF) : void
            +setSpeed(x : qreal, y : qreal) : void
			..Getters..
            +getSpeed() : QPointF
        }

        abstract "Viewer" as viewer {
            -angle : qreal

            +setAngle(angle : qreal) : void
            +getAngle() : qreal
        }
    }

    class "Glass" as glass {
        --
        +Glass(width : qreal, height : qreal)
		..Implementations..
		+draw(p : QPainter) : void
	}

    class "Wall" as wall {
        --
        +Wall(width : qreal, height : qreal)
		..Implementations..
		+draw(p : QPainter) : void
	}

    class "CCTV" as cam {
        --
        +CCTV()
		..Implementations..
		+draw(p : QPainter) : void
	}

	class "Exit" as exit {
		--
        +Exit()
		..Implementations..
		+draw(p : QPainter) : void
	}

	class "Money" as money {
		--
		+Money()
		..Implementations..
		+draw(p : QPainter) : void
	}

    abstract "Character" as charac {
        --
        +Character()
		..Implementations..
		+draw(p : QPainter) : void
	}

    class "Player" as player {
        --
        ..Implementations..
        +draw(p : QPainter) : void
    }

    abstract "Enemy" as enemy {
		-path: QPointF
		--
		+clearPath() : void
		+addPathSet(step : QPointF) : void
		..Implementations..
        +draw(p : QPainter) : void
	}

    class "Guard" as guard

    class "Cop" as cop

    statE ..|> entity
    dynE ..|> entity

    glass ..|> statE
    wall ..|> statE
    cam ..|> statE
	exit ..|> statE
	money ..|> statE

    charac ..|> dynE

    enemy ..|> charac

    guard ..|> enemy
    cop ..|> enemy
    player ..|> charac

	cam ..|> viewer
    enemy ..|> viewer
}

package scenes {
    abstract "Scene" as scene{
        +changed() : void
        +subscribe(o : Observer) : void
        +draw(p : QPainter) : void
    }

    class "Menu" as menu {

    }

    class "GameScene" as gScene {
		..Implementations..
		+draw(p : QPainter) : void
    }

    menu .up.|> scene
    gScene .up.|> scene
}

package views {
    abstract "Observer" as obs {
        +refresh() : void
        +stop() : void
        +setScene(s : Scene) : void
    }

    class "GameWindow" as gameW  <<QMainWindow>>{

    }

    gameW .up.|> obs
}

scene o--> obs : "#observers"
obs o--> scene : "#theScene"

package gameLogic {
	abstract "Controller" as c {
        keyPressed(key : int);
        keyReleased(key : int);
        mouseClick(pos : QPointF)
	}

	class "MenuController" as mc {

	}

    class "GameLogic" as gLogic {
		--
		-move_step() : void
		-gameOver() : void
		..Implementations..
		keyPressed(key : int);
        keyReleased(key : int);
        mouseClick(pos : QPointF)
    }

	gLogic ..|> c
	mc ..|> c
}

gameW o--> c : "#theController"

mc o-up-> menu : "#theScene"
gLogic o-up-> gScene : "#theScene"

gScene o--> entity : "-entities"

@enduml
