@startuml dillinger_classes

skinparam shadowing false
'skinparam linetype polyline
'skinparam linetype ortho

skinparam class {
    ArrowColor black
    BorderColor black
    BackGroundColor lightgrey
}

skinparam package {
    ArrowColor black
    BorderColor black
    BackGroundColor white
}

package gameObjects {

    abstract "Entity" as entity {
        -boundingBox : QRectF

        +draw(p : QPainter) : void
		..Setters..
        +setPosition(pos : QPointF) : void
        +setPosition(x : qreal, y : qreal) : void
		+getType() : QString
		..Getters..
        +getBoundingBox() : QRectF
        +getPosition() : QPointF
    }

    together {
        abstract "StaticEntity" as statE {
            -isTransparent : boolean
            -isNoiseMuffler : boolean
            -isTangible : boolean
			..Implementations..
			+getType() : QString
			..Getters..
            +isTransparent() : boolean
            +isNoiseMuffler() : boolean
            +isTangible() : boolean
        }

        abstract "DynamicEntity" as dynE {
            -speed : QPointF
			-angle : qreal
			-sprites : QPixmap
			..Implementations..
			+draw(p : QPainter) : void
			..Setters..
            +setSpeed(speed : QPointF) : void
            +setSpeed(x : qreal, y : qreal) : void
			+setAngle(angle : qreal) : void
			..Getters..
            +getSpeed() : QPointF
			+getAngle() : qreal
        }

        abstract "Viewer" as viewer

        abstract "Listener" as listener
    }

    class "Glass" as glass {
		..Implementations..
		+draw(p : QPainter) : void
	}

    class "Wall" as wall {
		..Implementations..
		+draw(p : QPainter) : void
	}

    class "CCTV" as cam {
		..Implementations..
		+draw(p : QPainter) : void
	}

    abstract "Character" as charac {
		..Implementations..
		+draw(p : QPainter) : void
	}

    class "Guard" as guard

    class "Cop" as cop

    class "Player" as player {
		..Implementations..
		+draw(p : QPainter) : void
	}

    statE ..|> entity
    dynE ..|> entity

    glass ..|> statE
    wall ..|> statE
    cam ..|> statE

    charac ..|> dynE

    guard ..|> charac
    cop ..|> charac
    player ..|> charac

	cam ..|> viewer
    charac ..|> viewer
    charac ..|> listener
}

package scenes {
    abstract "Scene" as scene{
        +changed() : void
        +subscribe(o : Observer) : void
        +draw(p : QPainter) : void
    }

    class "Menu" as menu {

    }

    class "GameScene" as gScene {

    }

    menu .up.|> scene
    gScene .up.|> scene
}

package views {
    abstract "Observer" as obs {
        +refresh() : void
        +stop() : void
        +setScene(s : Scene) : void
    }

    class "GameWindow" as gameW  <<QMainWindow>>{

    }

    gameW .up.|> obs
}

scene o--> obs : "#observers"
obs o--> scene : "#theScene"

package gameLogic {
	abstract "Controller" as c {

	}

	class "MenuController" as mc {

	}

    class "GameLogic" as gLogic {

    }

	class "EnnemiAI" as ai {

	}

	class "PlayerControls" as pControls {

	}

	gLogic ..|> c
	mc ..|> c

	gLogic --> ai
	gLogic --> pControls
}

@enduml
