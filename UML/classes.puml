@startuml dillinger_classes

skinparam shadowing false
'skinparam linetype polyline
'skinparam linetype ortho

skinparam class {
    ArrowColor black
    BorderColor black
    BackGroundColor lightgrey
}

skinparam package {
    ArrowColor black
    BorderColor black
    BackGroundColor white
}

package gameObjects {

    abstract "Entity" as entity {
        -boundingBox : QRectF
        -angle : qreal

        #sprites : QPixmap
        #selectSprite : QPixmap

        +draw(p : QPainter) : void

        +setPosition(pos : QPointF) : void
        +setPosition(x : qreal, y : qreal) : void
        +setAngle(angle : orientation) : void

        +getBoundingBox() : QRectF
        +getPosition() : QPointF
        +getAngle() : orientation
    }

    together {
        abstract "StaticEntity" as statE {
            -isTransparent : boolean
            -isNoiseMuffler : boolean
            -isTangible : boolean

            +isTransparent() : boolean
            +isNoiseMuffler() : boolean
            +isTangible() : boolean
        }

        abstract "DynamicEntity" as dynE {
            -speed : QPointF

            +setSpeed(speed : QPointF) : void
            +setSpeed(x : qreal, y : qreal) : void

            +getSpeed() : QPointF
        }

        abstract "Viewer" as viewer

        abstract "Listener" as listener
    }

    class "Glass" as glass

    class "Wall" as wall

    class "Camera" as cam

    abstract "Character" as charac

    class "Guard" as guard

    class "Cop" as cop

    class "Player" as player

    statE ..|> entity
    dynE ..|> entity

    glass ..|> statE
    wall ..|> statE
    cam ..|> statE

    charac ..|> dynE

    guard ..|> charac
    cop ..|> charac
    player ..|> charac

    charac ..|> viewer
    charac ..|> listener
    cam ..|> viewer
}

package scenes {
    abstract "Scene" as scene{
        +changed() : void
        +subscribe(o : Observer) : void
        +draw(p : QPainter) : void
    }

    class Menu {

    }

    class GameScene {

    }

    Menu .up.|> scene
    GameScene .up.|> scene
}

package views {
    abstract "Observer" as obs {
        +refresh() : void
        +stop() : void
        +setScene(s : Scene) : void
    }

    class "GameWindow" as gameW  <<QMainWindow>>{

    }

    gameW .up.|> obs
}

scene o--> obs : "#observers"
obs o--> scene : "#theScene"

package GameLogic {
    class PhysicsEngine {

    }
}

@enduml
